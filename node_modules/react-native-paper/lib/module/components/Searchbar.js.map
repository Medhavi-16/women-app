{"version":3,"sources":["Searchbar.tsx"],"names":["React","StyleSheet","TextInput","I18nManager","color","IconButton","Surface","withTheme","MaterialCommunityIcon","Searchbar","forwardRef","ref","clearAccessibilityLabel","clearIcon","icon","iconColor","customIconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","style","theme","value","rest","root","useRef","useImperativeHandle","focus","current","clear","setNativeProps","args","isFocused","blur","handleClearPress","onChangeText","colors","roundness","dark","fonts","textColor","text","font","regular","alpha","rgb","string","rippleColor","borderRadius","elevation","styles","container","size","isRTL","input","primary","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth"],"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,UADF,EAGEC,SAHF,EAIEC,WAJF,QAOO,cAPP;AASA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,OAAOC,qBAAP,MAAkC,yBAAlC;;AAwDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,MAAMC,SAAS,gBAAGT,KAAK,CAACU,UAAN,CAChB,OAeEC,GAfF,KAgBK;AAAA,MAfH;AACEC,IAAAA,uBAAuB,GAAG,OAD5B;AAEEC,IAAAA,SAFF;AAGEC,IAAAA,IAHF;AAIEC,IAAAA,SAAS,EAAEC,eAJb;AAKEC,IAAAA,UALF;AAMEC,IAAAA,WANF;AAOEC,IAAAA,WAPF;AAQEC,IAAAA,wBAAwB,GAAG,QAR7B;AASEC,IAAAA,KATF;AAUEC,IAAAA,KAVF;AAWEC,IAAAA;AAXF,GAeG;AAAA,MAHEC,IAGF;;AACH,QAAMC,IAAI,GAAGzB,KAAK,CAAC0B,MAAN,CAAwB,IAAxB,CAAb;AAEA1B,EAAAA,KAAK,CAAC2B,mBAAN,CAA0BhB,GAA1B,EAA+B;AAAA;;AAAA,WAAO;AACpC;AACAiB,MAAAA,KAAK,mBAAEH,IAAI,CAACI,OAAP,kDAAE,cAAcD,KAFe;AAGpC;AACAE,MAAAA,KAAK,oBAAEL,IAAI,CAACI,OAAP,mDAAE,eAAcC,KAJe;AAKpCC,MAAAA,cAAc,EAAGC,IAAD;AAAA;;AAAA,iCAAkBP,IAAI,CAACI,OAAvB,mDAAkB,eAAcE,cAAd,CAA6BC,IAA7B,CAAlB;AAAA,OALoB;AAMpC;AACAC,MAAAA,SAAS,oBAAER,IAAI,CAACI,OAAP,mDAAE,eAAcI,SAPW;AAQpC;AACAC,MAAAA,IAAI,oBAAET,IAAI,CAACI,OAAP,mDAAE,eAAcK;AATgB,KAAP;AAAA,GAA/B;;AAYA,QAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,sBAAAV,IAAI,CAACI,OAAL,kEAAcC,KAAd;AACA,0BAAAN,IAAI,CAACY,YAAL,+EAAAZ,IAAI,EAAgB,EAAhB,CAAJ;AACD,GAHD;;AAKA,QAAM;AAAEa,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,IAArB;AAA2BC,IAAAA;AAA3B,MAAqClB,KAA3C;AACA,QAAMmB,SAAS,GAAGJ,MAAM,CAACK,IAAzB;AACA,QAAMC,IAAI,GAAGH,KAAK,CAACI,OAAnB;AACA,QAAM7B,SAAS,GACbC,eAAe,KACduB,IAAI,GAAGE,SAAH,GAAerC,KAAK,CAACqC,SAAD,CAAL,CAAiBI,KAAjB,CAAuB,IAAvB,EAA6BC,GAA7B,GAAmCC,MAAnC,EADL,CADjB;AAGA,QAAMC,WAAW,GAAG5C,KAAK,CAACqC,SAAD,CAAL,CAAiBI,KAAjB,CAAuB,IAAvB,EAA6BC,GAA7B,GAAmCC,MAAnC,EAApB;AAEA,sBACE,oBAAC,OAAD;AACE,IAAA,KAAK,EAAE,CACL;AAAEE,MAAAA,YAAY,EAAEX,SAAhB;AAA2BY,MAAAA,SAAS,EAAE;AAAtC,KADK,EAELC,MAAM,CAACC,SAFF,EAGL/B,KAHK;AADT,kBAOE,oBAAC,UAAD;AACE,IAAA,mBAAmB,EAAC,QADtB;AAEE,IAAA,0BAA0B,EAAC,QAF7B;AAGE,IAAA,iBAAiB,EAAC,QAHpB;AAIE,IAAA,UAAU,MAJZ;AAKE,IAAA,WAAW,EAAE2B,WALf;AAME,IAAA,OAAO,EAAE9B,WANX;AAOE,IAAA,KAAK,EAAEH,SAPT;AAQE,IAAA,IAAI,EACFD,IAAI,KACH,CAAC;AAAEuC,MAAAA,IAAF;AAAQjD,MAAAA;AAAR,KAAD,kBACC,oBAAC,qBAAD;AACE,MAAA,IAAI,EAAC,SADP;AAEE,MAAA,KAAK,EAAEA,KAFT;AAGE,MAAA,IAAI,EAAEiD,IAHR;AAIE,MAAA,SAAS,EAAElD,WAAW,CAACmD,KAAZ,GAAoB,KAApB,GAA4B;AAJzC,MAFE,CATR;AAmBE,IAAA,kBAAkB,EAAElC;AAnBtB,IAPF,eA4BE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAE,CAAC+B,MAAM,CAACI,KAAR;AAAiBnD,MAAAA,KAAK,EAAEqC;AAAxB,OAAsCE,IAAtC,GAA8C1B,UAA9C,CADT;AAEE,IAAA,WAAW,EAAEE,WAAW,IAAI,EAF9B;AAGE,IAAA,oBAAoB,EAAEkB,MAAM,CAAClB,WAH/B;AAIE,IAAA,cAAc,EAAEkB,MAAM,CAACmB,OAJzB;AAKE,IAAA,qBAAqB,EAAC,aALxB;AAME,IAAA,aAAa,EAAC,QANhB;AAOE,IAAA,kBAAkB,EAAEjB,IAAI,GAAG,MAAH,GAAY,OAPtC;AAQE,IAAA,mBAAmB,EAAC,QARtB;AASE,IAAA,iBAAiB,EAAC,QATpB;AAUE,IAAA,GAAG,EAAEd,IAVP;AAWE,IAAA,KAAK,EAAEF;AAXT,KAYMC,IAZN,EA5BF,eA0CE,oBAAC,UAAD;AACE,IAAA,UAAU,MADZ;AAEE,IAAA,QAAQ,EAAE,CAACD,KAFb;AAGE,IAAA,kBAAkB,EAAEX,uBAHtB;AAIE,IAAA,KAAK,EAAEW,KAAK,GAAGR,SAAH,GAAe,wBAJ7B;AAKE,IAAA,WAAW,EAAEiC,WALf;AAME,IAAA,OAAO,EAAEb,gBANX;AAOE,IAAA,IAAI,EACFtB,SAAS,KACR,CAAC;AAAEwC,MAAAA,IAAF;AAAQjD,MAAAA;AAAR,KAAD,kBACC,oBAAC,qBAAD;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,KAAK,EAAEA,KAFT;AAGE,MAAA,IAAI,EAAEiD,IAHR;AAIE,MAAA,SAAS,EAAElD,WAAW,CAACmD,KAAZ,GAAoB,KAApB,GAA4B;AAJzC,MAFO,CARb;AAkBE,IAAA,mBAAmB,EAAC,QAlBtB;AAmBE,IAAA,0BAA0B,EAAC,QAnB7B;AAoBE,IAAA,iBAAiB,EAAC;AApBpB,IA1CF,CADF;AAmED,CAhHe,CAAlB;AAmHA,MAAMH,MAAM,GAAGlD,UAAU,CAACwD,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,aAAa,EAAE,KADN;AAETC,IAAAA,UAAU,EAAE;AAFH,GADoB;AAK/BJ,EAAAA,KAAK,EAAE;AACLK,IAAAA,IAAI,EAAE,CADD;AAELC,IAAAA,QAAQ,EAAE,EAFL;AAGLC,IAAAA,WAAW,EAAE,CAHR;AAILC,IAAAA,SAAS,EAAE,SAJN;AAKLC,IAAAA,SAAS,EAAE7D,WAAW,CAACmD,KAAZ,GAAoB,OAApB,GAA8B,MALpC;AAMLW,IAAAA,QAAQ,EAAE;AANL;AALwB,CAAlB,CAAf;AAeA,eAAe1D,SAAS,CAACE,SAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      style,\n      theme,\n      value,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => ({\n      // @ts-ignore\n      focus: root.current?.focus,\n      // @ts-ignore\n      clear: root.current?.clear,\n      setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n      // @ts-ignore\n      isFocused: root.current?.isFocused,\n      // @ts-ignore\n      blur: root.current?.blur,\n    }));\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[styles.input, { color: textColor, ...font }, inputStyle]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          accessibilityLabel={clearAccessibilityLabel}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]}